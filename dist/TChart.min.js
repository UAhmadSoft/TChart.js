"use strict"; class TChart { constructor(a, b, c, d) { this.id = a, this.width = b, this.height = c, this.data = d, this.axisRatio = 10, this.verticalMargin = this.height * this.axisRatio / 100, this.horizontalMargin = this.width * this.axisRatio / 100, this.axisColor = "grey", this.axisWidth = .75, this.fontRatio = 2.5, this.fontFamily = "times", this.fontStyle = "normal", this.fontWeight = "300", this.fontColor = "darkgrey", this.verticalFontSize = this.height * this.fontRatio / 100, this.horizontalFontSize = this.width * this.fontRatio / 100, this.guidelineColor = "lightgrey", this.guidelineWidth = .5; let e = document.createElement("canvas"); e.id = this.id + "-" + Math.random(), e.width = this.width, e.height = this.height, document.getElementById(this.id).innerHTML = "", document.getElementById(this.id).appendChild(e), this.canvas = e, this.context = e.getContext("2d"), this.labels = [], this.values = [], this.data.forEach(a => { this.labels.push(a.label), this.values.push(a.value) }), this.itemsNumber = this.data.length, this.maxValue = Math.max.apply(null, this.values), this.minValue = Math.min.apply(null, this.values), this.verticalAxisWidth = this.height - 2 * this.verticalMargin, this.horizontalAxisWidth = this.width - 2 * this.horizontalMargin, this.verticalUpperBound = 10 * Math.ceil(this.maxValue / 10), this.verticalLabelFreq = this.verticalUpperBound / this.itemsNumber, this.horizontalLabelFreq = this.horizontalAxisWidth / this.itemsNumber } drawBarChart() { this.drawVerticalAxis(), this.drawVerticalLabels(), this.drawHorizontalAxis(), this.drawHorizontalLabels(), this.drawHorizontalGuidelines(), this.drawBars() } drawLineChart() { this.drawVerticalAxis(), this.drawVerticalLabels(), this.drawHorizontalAxis(), this.drawHorizontalLabels(), this.drawHorizontalGuidelines(), this.drawLines() } drawVerticalAxis() { this.context.beginPath(), this.context.strokeStyle = this.axisColor, this.context.lineWidth = this.axisWidth, this.context.moveTo(this.horizontalMargin, this.verticalMargin), this.context.lineTo(this.horizontalMargin, this.height - this.verticalMargin), this.context.stroke() } drawVerticalLabels() { let a = this.fontStyle + " " + this.fontWeight + " " + this.verticalFontSize + "px " + this.fontFamily; this.context.font = a, this.context.fillStyle = this.fontColor, this.context.textAlign = "right"; let b = this.verticalAxisWidth / this.verticalUpperBound * this.verticalLabelFreq; for (let a = 0; a <= this.itemsNumber; a++) { let c = Math.ceil(this.verticalUpperBound - a * this.verticalLabelFreq), d = this.horizontalMargin - this.horizontalMargin / this.axisRatio, e = this.verticalMargin + a * b; this.context.fillText(c, d, e) } } drawHorizontalAxis() { this.context.beginPath(), this.context.strokeStyle = this.axisColor, this.context.lineWidth = this.axisWidth, this.context.moveTo(this.horizontalMargin, this.height - this.verticalMargin), this.context.lineTo(this.width - this.horizontalMargin, this.height - this.verticalMargin), this.context.stroke() } drawHorizontalLabels() { let a = this.fontStyle + " " + this.fontWeight + " " + this.verticalFontSize + "px " + this.fontFamily; this.context.font = a, this.context.fillStyle = this.fontColor, this.context.textAlign = "center", this.context.textBaseline = "top"; for (let a = 0; a < this.itemsNumber; a++) { let b = this.horizontalMargin + a * this.horizontalLabelFreq + this.horizontalLabelFreq / 2, c = this.height - this.verticalMargin + this.verticalMargin / this.axisRatio; this.context.fillText(this.labels[a], b, c) } } drawHorizontalGuidelines() { this.context.strokeStyle = this.guidelineColor, this.context.lineWidth = this.guidelineWidth; let a = this.verticalAxisWidth / this.verticalUpperBound * this.verticalLabelFreq; for (let b = 0; b <= this.itemsNumber; b++) { let c = this.horizontalMargin, d = this.verticalMargin + b * a, e = this.horizontalMargin + this.horizontalAxisWidth, f = this.verticalMargin + b * a; this.context.beginPath(), this.context.moveTo(c, d), this.context.lineTo(e, f), this.context.stroke() } } drawBars() { this.createRandomRGBColor(); for (let a = 0; a < this.itemsNumber; a++) { let b = this.createRandomRGBColor(), c = "rgba(" + b.red + "," + b.green + "," + b.blue + "," + "0.5" + ")", d = "rgb(" + b.red + "," + b.green + "," + b.blue + ")"; this.context.beginPath(); let e = this.horizontalMargin + a * this.horizontalLabelFreq + 2 * (this.horizontalLabelFreq / this.axisRatio), f = this.height - this.verticalMargin, g = this.horizontalLabelFreq - 2 * (2 * this.horizontalLabelFreq / this.axisRatio), h = -1 * (this.verticalAxisWidth * this.values[a] / this.verticalUpperBound); this.context.fillStyle = c, this.context.strokeStyle = d, this.context.rect(e, f, g, h), this.context.fill(), this.context.stroke() } } createRandomRGBColor() { const a = getRandomInt(0, 257), b = getRandomInt(0, 257), c = getRandomInt(0, 257); return { red: a, green: b, blue: c } } drawLines() { for (let a = 0; a < this.itemsNumber; a++) { this.context.beginPath(); let b = this.horizontalMargin + a * this.horizontalLabelFreq + this.horizontalLabelFreq / 2, c = this.height - this.verticalMargin + -1 * (this.verticalAxisWidth * this.values[a] / this.verticalUpperBound); this.context.fillStyle = this.fontColor, this.context.arc(b, c, this.horizontalLabelFreq / 9, 0, 2 * Math.PI), this.context.fill() } this.context.beginPath(), this.context.moveTo(this.horizontalMargin, this.height - this.verticalMargin), this.context.strokeStyle = this.fontColor; for (let a = 0; a < this.itemsNumber; a++) { let b = this.horizontalMargin + a * this.horizontalLabelFreq + this.horizontalLabelFreq / 2, c = this.height - this.verticalMargin + -1 * (this.verticalAxisWidth * this.values[a] / this.verticalUpperBound); this.context.lineWidth = 2 * (this.axisWidth / (2 * (this.itemsNumber - a))), this.context.lineTo(b, c), this.context.stroke() } } } function getRandomInt(a, b) { return a = Math.ceil(a), b = Math.floor(b), Math.floor(Math.random() * (b - a)) + a }